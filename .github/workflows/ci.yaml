name: Johnny Dev Main arc-runner-set-oke-poc
# name: Johnny Dev Main arc-runner-set-oke-org-nv-ai-bp

on:
  push:
    branches:
      - main
  workflow_dispatch:    # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë
    inputs:            # ÔºàÂèØÈÄâÔºâÂÆö‰πâËæìÂÖ•ÂèÇÊï∞
      environment:
        description: 'Deploy Environment'
        required: true
        default: 'staging'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Explore-Github-Actions:
    runs-on: arc-runner-set-oke-org-poc
    # runs-on: arc-runner-set-oke-org-nv-ai-bp
    env:
      NOTEBOOK_PATH: ./launchable/PDFtoPodcast.ipynb
      PYTHON_VERSION: 3.12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - name: Install software
        run: |
          sudo apt update && sudo apt install -y pciutils
      - name: Check System Info
        run: |
          echo "=== OS Info ==="
          uname -a  # Linux/macOS
          cat /etc/os-release
          
          echo "=== CPU Info ==="
          lscpu || sysctl -n machdep.cpu.brand_string  # Linux | macOS
          
          echo "=== Memory Info ==="
          free -h || vm_stat  # Linux | macOS
          
          echo "=== Disk Space ==="
          df -h  # Linux/macOS
      - name: Check GPU Info
        run: |
          echo "===== 1. Check PCI Devices (GPU) ====="
          sudo lspci | grep -i vga  # ÂàóÂá∫ÊâÄÊúâÊòæÂç°ËÆæÂ§á
          
          echo "===== 2. Check NVIDIA GPU (if exists) ====="
          if command -v nvidia-smi &> /dev/null; then
            nvidia-smi  # ÊòæÁ§∫ NVIDIA GPU Áä∂ÊÄÅÂíåÈ©±Âä®ÁâàÊú¨
          else
            echo "NVIDIA GPU not detected or drivers not installed."
          fi

          echo "===== 3. Check OpenCL/ROCm (AMD/Intel) ====="
          if command -v clinfo &> /dev/null; then
            clinfo | grep -i "device name"  # Ê£ÄÊü• OpenCL ËÆæÂ§á
          else
            echo "OpenCL/ROCm not available."
          fi

      - name: Check CUDA/cuDNN
        run: |
          echo "===== CUDA Version ====="
          if command -v nvcc &> /dev/null; then
            nvcc --version
          else
            echo "CUDA not installed."
          fi

          echo "===== cuDNN Version ====="
          if [ -f /usr/local/cuda/include/cudnn_version.h ]; then
            grep -E "define CUDNN_MAJOR|define CUDNN_MINOR|define CUDNN_PATCHLEVEL" /usr/local/cuda/include/cudnn_version.h
          else
            echo "cuDNN not found."
          fi

      - name: Check Vulkan
        run: |
          echo "===== Vulkan Info ====="
          if command -v vulkaninfo &> /dev/null; then
            vulkaninfo --summary | grep "GPU id"
          else
            echo "Vulkan not installed."
          fi

      - name: Check OpenCL/ROCm
        run: |
          echo "===== OpenCL Devices ====="
          if command -v clinfo &> /dev/null; then
            clinfo | grep -A 5 "Device Name"
          else
            echo "OpenCL not installed."
          fi

          echo "===== ROCm (AMD GPU) ====="
          if [ -f /opt/rocm/bin/rocminfo ]; then
            /opt/rocm/bin/rocminfo | grep "gfx"
          else
            echo "ROCm not installed."
          fi
      - run: echo "üçè This job's status is ${{ job.status }}."

